import { Context, StoreReference } from "./contexts";
import { DecreasingOrder, IncreasingOrder } from "./orders";
import { EqualityFilter } from "./filters";
import { Value } from "./records";
import * as transactions from "./transactions";
export declare type ReadableQueue = transactions.ReadableQueue;
export declare type WritableQueue = transactions.WritableQueue;
export declare type RecordOf<A> = A extends StoreReference<infer C, infer D> ? C : never;
export declare function createContext(): Context;
export declare function createIncreasingOrder<A extends Value>(): IncreasingOrder<A>;
export declare function createDecreasingOrder<A extends Value>(): DecreasingOrder<A>;
export declare function createEqualityFilter<A extends Value>(value: A): EqualityFilter<A>;
