// This file was auto-generated by @joelek/ts-autoguard. Edit at own risk.

import * as autoguard from "@joelek/ts-autoguard/dist/lib-shared";

export const FieldBase: autoguard.serialization.MessageGuard<FieldBase> = autoguard.guards.Object.of({
	"type": autoguard.guards.String,
	"nullable": autoguard.guards.Boolean
}, {});

export type FieldBase = autoguard.guards.Object<{
	"type": autoguard.guards.String,
	"nullable": autoguard.guards.Boolean
}, {}>;

export const BigIntField: autoguard.serialization.MessageGuard<BigIntField> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => FieldBase),
	autoguard.guards.Object.of({
		"type": autoguard.guards.StringLiteral.of("bigint")
	}, {})
);

export type BigIntField = autoguard.guards.Intersection<[
	autoguard.guards.Reference<FieldBase>,
	autoguard.guards.Object<{
		"type": autoguard.guards.StringLiteral<"bigint">
	}, {}>
]>;

export const BinaryField: autoguard.serialization.MessageGuard<BinaryField> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => FieldBase),
	autoguard.guards.Object.of({
		"type": autoguard.guards.StringLiteral.of("binary")
	}, {})
);

export type BinaryField = autoguard.guards.Intersection<[
	autoguard.guards.Reference<FieldBase>,
	autoguard.guards.Object<{
		"type": autoguard.guards.StringLiteral<"binary">
	}, {}>
]>;

export const BooleanField: autoguard.serialization.MessageGuard<BooleanField> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => FieldBase),
	autoguard.guards.Object.of({
		"type": autoguard.guards.StringLiteral.of("boolean")
	}, {})
);

export type BooleanField = autoguard.guards.Intersection<[
	autoguard.guards.Reference<FieldBase>,
	autoguard.guards.Object<{
		"type": autoguard.guards.StringLiteral<"boolean">
	}, {}>
]>;

export const NumberField: autoguard.serialization.MessageGuard<NumberField> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => FieldBase),
	autoguard.guards.Object.of({
		"type": autoguard.guards.StringLiteral.of("number")
	}, {})
);

export type NumberField = autoguard.guards.Intersection<[
	autoguard.guards.Reference<FieldBase>,
	autoguard.guards.Object<{
		"type": autoguard.guards.StringLiteral<"number">
	}, {}>
]>;

export const StringField: autoguard.serialization.MessageGuard<StringField> = autoguard.guards.Intersection.of(
	autoguard.guards.Reference.of(() => FieldBase),
	autoguard.guards.Object.of({
		"type": autoguard.guards.StringLiteral.of("string")
	}, {
		"search": autoguard.guards.Boolean
	})
);

export type StringField = autoguard.guards.Intersection<[
	autoguard.guards.Reference<FieldBase>,
	autoguard.guards.Object<{
		"type": autoguard.guards.StringLiteral<"string">
	}, {
		"search": autoguard.guards.Boolean
	}>
]>;

export const Field: autoguard.serialization.MessageGuard<Field> = autoguard.guards.Union.of(
	autoguard.guards.Reference.of(() => BigIntField),
	autoguard.guards.Reference.of(() => BinaryField),
	autoguard.guards.Reference.of(() => BooleanField),
	autoguard.guards.Reference.of(() => NumberField),
	autoguard.guards.Reference.of(() => StringField)
);

export type Field = autoguard.guards.Union<[
	autoguard.guards.Reference<BigIntField>,
	autoguard.guards.Reference<BinaryField>,
	autoguard.guards.Reference<BooleanField>,
	autoguard.guards.Reference<NumberField>,
	autoguard.guards.Reference<StringField>
]>;

export const Store: autoguard.serialization.MessageGuard<Store> = autoguard.guards.Object.of({
	"block": autoguard.guards.Number,
	"search": autoguard.guards.Number,
	"fields": autoguard.guards.Record.of(autoguard.guards.Reference.of(() => Field)),
	"keys": autoguard.guards.Array.of(autoguard.guards.String),
	"indices": autoguard.guards.Record.of(autoguard.guards.Reference.of(() => Index))
}, {});

export type Store = autoguard.guards.Object<{
	"block": autoguard.guards.Number,
	"search": autoguard.guards.Number,
	"fields": autoguard.guards.Record<autoguard.guards.Reference<Field>>,
	"keys": autoguard.guards.Array<autoguard.guards.String>,
	"indices": autoguard.guards.Record<autoguard.guards.Reference<Index>>
}, {}>;

export const Index: autoguard.serialization.MessageGuard<Index> = autoguard.guards.Object.of({
	"block": autoguard.guards.Number,
	"keys": autoguard.guards.Array.of(autoguard.guards.String)
}, {});

export type Index = autoguard.guards.Object<{
	"block": autoguard.guards.Number,
	"keys": autoguard.guards.Array<autoguard.guards.String>
}, {}>;

export const Link: autoguard.serialization.MessageGuard<Link> = autoguard.guards.Object.of({
	"parent": autoguard.guards.String,
	"child": autoguard.guards.String,
	"keys": autoguard.guards.Record.of(autoguard.guards.String)
}, {});

export type Link = autoguard.guards.Object<{
	"parent": autoguard.guards.String,
	"child": autoguard.guards.String,
	"keys": autoguard.guards.Record<autoguard.guards.String>
}, {}>;

export const Database: autoguard.serialization.MessageGuard<Database> = autoguard.guards.Object.of({
	"stores": autoguard.guards.Record.of(autoguard.guards.Reference.of(() => Store)),
	"links": autoguard.guards.Record.of(autoguard.guards.Reference.of(() => Link))
}, {});

export type Database = autoguard.guards.Object<{
	"stores": autoguard.guards.Record<autoguard.guards.Reference<Store>>,
	"links": autoguard.guards.Record<autoguard.guards.Reference<Link>>
}, {}>;

export namespace Autoguard {
	export const Guards = {
		"FieldBase": autoguard.guards.Reference.of(() => FieldBase),
		"BigIntField": autoguard.guards.Reference.of(() => BigIntField),
		"BinaryField": autoguard.guards.Reference.of(() => BinaryField),
		"BooleanField": autoguard.guards.Reference.of(() => BooleanField),
		"NumberField": autoguard.guards.Reference.of(() => NumberField),
		"StringField": autoguard.guards.Reference.of(() => StringField),
		"Field": autoguard.guards.Reference.of(() => Field),
		"Store": autoguard.guards.Reference.of(() => Store),
		"Index": autoguard.guards.Reference.of(() => Index),
		"Link": autoguard.guards.Reference.of(() => Link),
		"Database": autoguard.guards.Reference.of(() => Database)
	};

	export type Guards = { [A in keyof typeof Guards]: ReturnType<typeof Guards[A]["as"]>; };

	export const Requests = {};

	export type Requests = { [A in keyof typeof Requests]: ReturnType<typeof Requests[A]["as"]>; };

	export const Responses = {};

	export type Responses = { [A in keyof typeof Responses]: ReturnType<typeof Responses[A]["as"]>; };
};
